import java.io.*;
import java.net.URL;

public class MultiThreadedDownloader {
    public static void main(String[] args) {
        if (args.length < 2) {
            System.out.println("Usage: java MultiThreadedDownloader <fileURL> <numberOfThreads>");
            return;
        }

        String fileURL = args[0];
        int numberOfThreads = Integer.parseInt(args[1]);

        try {
            URL url = new URL(fileURL);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();

            int fileSize = connection.getContentLength();
            int partSize = fileSize / numberOfThreads;

            for (int i = 0; i < numberOfThreads; i++) {
                int startByte = i * partSize;
                int endByte = (i + 1) * partSize - 1;
                if (i == numberOfThreads - 1) {
                    endByte = fileSize - 1;
                }

                Thread thread = new DownloadThread(fileURL, startByte, endByte);
                thread.start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

class DownloadThread extends Thread {
    private final String fileURL;
    private final int startByte;
    private final int endByte;

    public DownloadThread(String fileURL, int startByte, int endByte) {
        this.fileURL = fileURL;
        this.startByte = startByte;
        this.endByte = endByte;
    }

    @Override
    public void run() {
        try {
            URL url = new URL(fileURL);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestProperty("Range", "bytes=" + startByte + "-" + endByte);

            InputStream inputStream = connection.getInputStream();
            FileOutputStream outputStream = new FileOutputStream("downloaded_part_" + startByte + "_" + endByte + ".tmp");

            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead);
            }

            inputStream.close();
            outputStream.close();

            System.out.println("Downloaded part from " + startByte + " to " + endByte);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
